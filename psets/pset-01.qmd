---
title:  "Problem set 1"
subtitle: "due Monday, September 8, 2025 at 11:59am"
# author: 
#     name: Katie Schuler
#     affiliation: University of Pennsylvania
number-sections: false
format: 
  html: 
    number-sections: false
  pdf: default

---

Instructions
: Upload your `.ipynb` notebook to gradescope by 11:59am on the due date. Please include your name, Problem set 1, and any collaborators you worked with in a text cell at the top of your notebook. Please also number your problems in some way and include comments in your code to indicate what part of a problem you are working on.  

```{r}
#| echo: false
library(emojifont)
library(ggplot2)

```



## Problem 1

Suppose you tracked the number of hours you spent each day talking to an AI for a week. Create a vector with the following values and store it as `ai_hours`: `2 3 4 2 5 0 4`. Use R’s built-in functions to calculate the total number of hours you talked to the AI that week, the average number of hours per day, and the minimum number of hours spent in a single day. Finally, perform a comparison operation on the `ai_hours` vector to determine which days you spent less than two hours talking to the AI.

## Problem 2

Create the matrix given below and store it as `my_matrix`. Use an R function to return what type of object `my_matrix` is. Then, perform a mathematical operation on the matrix by multiplying every element by 2, and another operation by adding 10 to every element.

```{r}
#| echo: false
x <- 10:18
matrix(x, nrow = 3, ncol = 3)

```


## Problem 3

Use `data.frame()` to create the dataframe shown below. Store the dataframe as `sytax`. Return the dataframe. Then use one of R's built in functions to return the structure of the data frame. 

```{r}
#| echo: false 
#| 
sentence <- c("The cat chased the mouse.",
              "The mouse the cat chased.",
              "Chased the cat the mouse.",
              "The cat, it chased the mouse.")
grammatical <- c(TRUE, FALSE, FALSE, TRUE)
rt_ms <- c(1200, 1800, 2000, 1500)
confidence <- c(5, 2, 1, 4)           # self-reported confidence (1–5 scale)

syntax <- data.frame(sentence, grammatical, rt_ms, confidence)

syntax



```

## Problem 4

Use `ggplot` and the `emojifont` package to create the following figure! A good place to start is reading the `emojifont` [package docs](https://cran.r-project.org/web/packages/emojifont/vignettes/emojifont.html). Also note that the color aesthetic is set to Penn Blue! Find the hex code for that precise color [here](https://branding.web-resources.upenn.edu/logos-and-branding/elements-penn-logo). 

```{r}
#| echo: false
ggplot() + geom_emoji("taco", color='#011F5B') + theme_void()

```


## Problem 5

Using the data frame you generated in question 3, recreate the following figure as faithfully as possible. You will need to adjust at least the `fill`, the `theme`, and some axis `lables`.  

```{r}
#| echo: false
ggplot(syntax, aes(x = grammatical, y = confidence)) +
  geom_boxplot(fill = "lightgreen") +
  labs(x = "Grammaticality", y = "Confidence Rating (1–5)") + 
  theme_bw()
```


## Problem 6 

Using the data frame you generated in question 3, recreate the following figure as faithfully as possible. You will need to adjust at least the `color` and `size` aesthetics. You'll need to add more than one `geom`. You'll also need to edit the `theme`, the `base size` of the font and many `lables`.  

```{r}
#| echo: false
#| warning: false

ggplot(syntax, aes(x = confidence, y = rt_ms)) +
  geom_point(aes(color = grammatical), size = 5) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  labs(x = "Confidence (1–5)", 
       y = "Reaction Time (ms)",
       color = "Grammatical?",
       title = "Confidence vs. Reaction Time by Grammaticality") +
  theme_dark(base_size =20)

```


